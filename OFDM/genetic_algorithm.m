function [indicators, sum_rate] = genetic_algorithm(N_f, Wn, Pn, h, sigma2, num_users)
    % Define GA problem
    lb = 1*ones(1, N_f);   % lower bound: user 1
    ub = num_users * ones(1, N_f);  % upper bound: user num_users
    IntCon = 1:N_f;  % All variables must be integers
    
    % Define fitness function with fixed parameters
    fitnessHandle = @(x) fitnessFunction(x, Wn, Pn, h, sigma2); % indicators, W, P, h, sigma2
    
    % Run Genetic Algorithm with visualization
    % options = optimoptions('ga', ...
    %                         'UseParallel', true, ...
    %                         'PlotFcn',  []);  % Disable plotting

    options = optimoptions('ga', ...    
    'UseParallel', true, ...    
    'PopulationSize', 20, ...
    'MaxGenerations', 20, ...
    'SelectionFcn', @selectionroulette, ...
    'CrossoverFcn', @crossoverintermediate, ...
    'StallGenLimit', 5, ...
    'MaxStallGenerations', 8, ...
    'MaxTime', 30, ...
    'PlotFcn', []);   


    % options = optimoptions('ga', ...
    % 'PopulationSize', 20, ...
    % 'MaxGenerations', 50, ...
    % 'UseParallel', true, ...
    % 'SelectionFcn', @selectionroulette, ...
    % 'CrossoverFcn', @crossoverintermediate, ...
    % 'StallGenLimit', 10, ...
    % 'MaxStallGenerations', 15, ...
    % 'MaxTime', 60, ...
    % 'PlotFcn', []); 



    [indicators, sum_rate] = ga(fitnessHandle, N_f, [], [], [], [], lb, ub, [], IntCon, options);
    
    % Display results
    % disp("Optimal assignment: "), disp(indicators);
    % disp("Maximum achievable sum rate: "), disp(-sum_rate);
end